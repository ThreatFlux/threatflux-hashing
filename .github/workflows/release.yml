name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e  # v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          release_name: File Scanner ${{ steps.get_tag.outputs.tag_name }}
          draft: false
          prerelease: false
          body: |
            ## File Scanner ${{ steps.get_tag.outputs.tag_name }}

            ### Features
            - 🔍 Comprehensive file metadata extraction
            - 🔐 Cryptographic hashing (MD5, SHA256, SHA512, BLAKE3)
            - 📝 String analysis and extraction
            - 🔧 Binary format analysis (PE/ELF/Mach-O)
            - ✅ Digital signature verification
            - 🔢 Hex dumping capabilities
            - 🌐 MCP server support with multiple transports
            - 💾 Analysis caching and string tracking
            - 🚀 Multi-threaded async processing

            ### Downloads
            Choose the binary for your platform:

            | Platform | Architecture | Download |
            |----------|-------------|----------|
            | Linux | x86_64 | `file-scanner-linux-amd64` |
            | Linux | ARM64 | `file-scanner-linux-arm64` |
            | macOS | Intel | `file-scanner-macos-amd64` |
            | macOS | Apple Silicon | `file-scanner-macos-arm64` |
            | Windows | x86_64 | `file-scanner-windows-amd64.exe` |
            | Docker | Multi-arch | `ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.tag_name }}` |

            ### Quick Start
            ```bash
            # Basic file analysis
            ./file-scanner /path/to/file

            # Full analysis with all features
            ./file-scanner /path/to/file --strings --hex-dump --verify-signatures --format yaml

            # MCP Server Mode
            ./file-scanner mcp-stdio
            ./file-scanner mcp-http --port 3000
            ```

            ### Docker Usage
            ```bash
            # Pull the image
            docker pull ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.tag_name }}

            # Analyze a file
            docker run --rm -v /path/to/files:/data ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.tag_name }} /data/file.bin
            ```

            For complete documentation, see the [README.md](https://github.com/${{ github.repository }}/blob/main/README.md).

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: file-scanner-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: file-scanner-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: file-scanner-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: file-scanner-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: file-scanner-windows-amd64.exe

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config libssl-dev
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev build-essential

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config openssl
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/file-scanner ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}

          # Verify the binary works
          ./${{ matrix.asset_name }} --version

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\file-scanner.exe ${{ matrix.asset_name }}

          # Verify the binary works
          .\${{ matrix.asset_name }} --version

      - name: Upload Release Asset
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5  # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  docker-release:
    name: Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392  # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2  # v3.10.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772  # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=File Scanner
            org.opencontainers.image.description=Comprehensive native file scanner with MCP server support
            org.opencontainers.image.authors=Wyatt Roersma <wyattroersma@gmail.com>
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ needs.create-release.outputs.tag_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.create-release.outputs.tag_name }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  test-release:
    name: Test Release Assets
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Download Linux AMD64 binary
        run: |
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            "https://api.github.com/repos/${{ github.repository }}/releases/assets/$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.create-release.outputs.tag_name }} | jq -r '.assets[] | select(.name=="file-scanner-linux-amd64") | .id')" \
            -o file-scanner-linux-amd64
          chmod +x file-scanner-linux-amd64

      - name: Test binary functionality
        run: |
          ./file-scanner-linux-amd64 --version
          ./file-scanner-linux-amd64 --help
          echo "Test content" > test-file.txt
          ./file-scanner-linux-amd64 test-file.txt --format json | jq '.metadata.size'

      - name: Test Docker image
        run: |
          docker pull ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.tag_name }}
          echo "Test content for Docker" > docker-test-file.txt
          docker run --rm -v $(pwd):/data ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.tag_name }} --version
          docker run --rm -v $(pwd):/data ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.tag_name }} /data/docker-test-file.txt --format json

  security-scan:
    name: Security Scan
    needs: docker-release
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@18f2510ee396bbf800e4dded78c5f5d7ea27a3ad  # v0.30.0
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.tag_name }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@f779452ac5af1c261dce0346a8b332380c2dcb9a  # v3.28.0
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
