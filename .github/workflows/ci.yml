name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        cache: true

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run tests (default features)
      run: cargo test --verbose

    - name: Run tests (all features)
      run: cargo test --all-features --verbose

    - name: Run tests (no default features)
      run: cargo test --no-default-features --verbose

    - name: Run doctests
      run: cargo test --doc

    - name: Test examples
      run: |
        cargo run --example basic_usage
        cargo run --example concurrent_hashing

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        cache: true

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy (default features)
      run: cargo clippy --all-targets -- -D warnings

    - name: Run clippy (all features)
      run: cargo clippy --all-features --all-targets -- -D warnings

    - name: Run clippy (no default features)
      run: cargo clippy --no-default-features --all-targets -- -D warnings

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        components: llvm-tools-preview
        cache: true

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Run benchmarks
      run: cargo bench --bench hash_benchmarks

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install cargo-msrv
      run: cargo install cargo-msrv

    - name: Verify MSRV
      run: cargo msrv verify

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Test documentation examples
      run: cargo test --doc --all-features