name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0  # Disable for CI to improve caching
  CARGO_NET_RETRY: 10
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  # RUSTFLAGS: "-C link-arg=-fuse-ld=lld"  # Disabled: lld not available in GitHub Actions by default
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse  # Faster registry updates

jobs:
  # First job to build and cache for other jobs
  build-cache:
    name: Build Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ steps.cache-key.outputs.key }}-registry
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ steps.cache-key.outputs.key }}-build
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Pre-build dependencies
        run: |
          cargo build --all-features
          cargo build --release
          cargo test --no-run --all-features

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.build-cache.outputs.cache-key }}-registry
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ needs.build-cache.outputs.cache-key }}-build
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: build-cache
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-build-
            ${{ runner.os }}-cargo-build-

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run fast unit tests
        run: ./scripts/test-fast.sh

      - name: Run tests with all features
        run: cargo test --all-features --verbose

      - name: Run doc tests
        run: cargo test --doc --verbose

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.build-cache.outputs.cache-key }}-registry
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ needs.build-cache.outputs.cache-key }}-build
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run comprehensive parallel tests
        run: ./scripts/test-parallel.sh

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: build-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.build-cache.outputs.cache-key }}-registry
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ needs.build-cache.outputs.cache-key }}-coverage
          restore-keys: |
            ${{ needs.build-cache.outputs.cache-key }}-build
            ${{ runner.os }}-cargo-build-

      - name: Cache coverage tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-llvm-cov
            ~/.cargo/bin/cargo-tarpaulin
          key: ${{ runner.os }}-coverage-tools-v2
          restore-keys: |
            ${{ runner.os }}-coverage-tools-

      - name: Free disk space
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/.ghcup
          sudo apt-get clean
          df -h

      - name: Install cargo-llvm-cov (faster than tarpaulin)
        run: |
          if ! command -v cargo-llvm-cov &> /dev/null; then
            cargo install cargo-llvm-cov --locked
          fi

      - name: Generate code coverage
        run: |
          # Use llvm-cov which is much faster than tarpaulin
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        timeout-minutes: 20

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info
          fail_ci_if_error: false  # Don't fail on coverage upload issues

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit-v2
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit --locked
          fi

      - name: Run security audit
        run: cargo audit

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    needs: build-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.build-cache.outputs.cache-key }}-registry
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ needs.build-cache.outputs.cache-key }}-bench
          restore-keys: |
            ${{ needs.build-cache.outputs.cache-key }}-build
            ${{ runner.os }}-cargo-build-

      - name: Run benchmarks
        run: cargo bench --no-run

  mcp-test:
    name: MCP Inspector Tests
    runs-on: ubuntu-latest
    needs: build-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-mcp-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-mcp-
            ${{ runner.os }}-npm-

      - name: Install MCP Inspector
        run: npm install -g @modelcontextprotocol/inspector

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ needs.build-cache.outputs.cache-key }}-build
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build release binary (if not cached)
        run: |
          if [ ! -f "./target/release/file-scanner" ]; then
            cargo build --release
          fi

      - name: Test MCP tools list
        run: |
          timeout 10s npx @modelcontextprotocol/inspector --cli ./target/release/file-scanner mcp-stdio --method tools/list

      - name: Test MCP with test file
        run: |
          echo "Test content" > /tmp/test.txt
          timeout 10s npx @modelcontextprotocol/inspector --cli ./target/release/file-scanner mcp-stdio --method tools/call --tool-name analyze_file --tool-arg file_path=/tmp/test.txt --tool-arg metadata=true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: file-scanner:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
