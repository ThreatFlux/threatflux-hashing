# Generated by Cargo
# will have compiled files and executables
debug/
target/
.mcp.json
# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# RustRover
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# VS Code
.vscode/

# macOS
.DS_Store

# Test binaries (compiled executables without extension)
test_call_graph
test_program
upx_test
vulnerable_test
evasion_test
malware_test
malware_test_simple
openssl_test

# Language-specific build artifacts
## Nim
nimcache/
*.nim.c
*.nim.h

## D language
*.o
*.di

## Fortran
*.mod
*.smod

## Pascal
*.ppu
*.compiled
*.or

## Ada
*.ali
*.adt

## C/C++ object files
*.obj

# Compiled test binaries (but keep source files)
test_programs/*_binary

# Exception: Track these specific test binaries for testing
!test_programs/c_advanced_binary
!test_programs/cpp_test_binary
!test_programs/go_test_binary
!test_programs/rust_test_binary
!test_programs/nim_test_binary
!test_programs/d_test_binary
!test_programs/fortran_test_binary
!test_programs/crypto_miner_binary
!test_programs/packed_rust_binary

# Temporary files
*.tmp
*.swp
*~

# IDE specific files
*.iml
.idea/

# Coverage reports
*.profraw
*.profdata
coverage/

# Benchmark results
target/criterion/

# Documentation build
target/doc/

# Local environment files
.env
.env.local

# Zig toolchain (downloaded for testing)
test_programs/zig-linux-x86_64-*/
zig.tar.xz

# YAML test reports
report_test.yaml
*.test.yaml

# MCP configuration (may contain secrets)
.mcp.json

# Test scan results and logs
*_analysis.json
*_analysis_*.json
*_mcp_*.json
*_scan_*.log
full_scan_*.log
parallel_scan_*.log
scan_*.log

# Test shell scripts
scan-*.sh
test_*.sh
yara_*.sh

# Test C source files (keep test_programs directory)
evasion_test.c
malware_test.c
malware_test_simple.c
openssl_test.c
test_call_graph.c
test_program.c
upx_test.c
vulnerable_test.c

# Test Rust files in root
debug_test.rs

# YARA rule files (generated)
yara_rules_*.yar

# Scan output directories
complete_program_files_scan/
scan_results/
scan_output/

# Package lock file (use Cargo.lock instead)
package-lock.json
test_results.log

# ThreatFlux library build artifacts
threatflux-*/target/
**/target/criterion/
**/target/doc/

# Library-specific test outputs
threatflux-*/*.test.yaml
threatflux-*/*_test.log
threatflux-*/test_output/

# Documentation build artifacts  
threatflux-*/doc/
**/doc/book/

# Example outputs
examples/output/
**/examples/output/

# Cache data from libraries
**/cache/
**/.cache/
threatflux-cache/cache_data/

# Additional backup patterns for refactoring
*.rs.backup
*.toml.backup
*_old.rs.bak
*_refactored.rs
