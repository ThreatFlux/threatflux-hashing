name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: threatflux-binary-analysis
    
    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit
    
    - name: Run cargo audit
      run: cargo audit --json --output-format json > audit-results.json || true
      working-directory: threatflux-binary-analysis
    
    - name: Check audit results
      run: |
        if [ -f threatflux-binary-analysis/audit-results.json ]; then
          cat threatflux-binary-analysis/audit-results.json
          # Check if there are any vulnerabilities
          VULN_COUNT=$(cat threatflux-binary-analysis/audit-results.json | jq -r '.vulnerabilities.count // 0')
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "🚨 Found $VULN_COUNT security vulnerabilities!"
            cat threatflux-binary-analysis/audit-results.json | jq -r '.vulnerabilities.list[]? | "- \(.advisory.title) (\(.advisory.id))"'
            exit 1
          else
            echo "✅ No security vulnerabilities found"
          fi
        fi
    
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: threatflux-binary-analysis/audit-results.json

  security-clippy:
    name: Security Lints
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: threatflux-binary-analysis
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcapstone-dev pkg-config
    
    - name: Run security-focused clippy lints
      run: |
        cargo clippy --all-features --all-targets -- \
          -W clippy::integer_overflow \
          -W clippy::panic \
          -W clippy::unwrap_used \
          -W clippy::expect_used \
          -W clippy::indexing_slicing \
          -W clippy::panic_in_result_fn \
          -W clippy::string_slice \
          -W clippy::float_arithmetic \
          -W clippy::integer_arithmetic \
          -W clippy::cast_possible_truncation \
          -W clippy::cast_possible_wrap \
          -W clippy::cast_sign_loss \
          -W clippy::lossy_float_literal \
          -W clippy::imprecise_flops \
          -W clippy::suboptimal_flops \
          -W clippy::fn_to_numeric_cast_with_truncation \
          -W clippy::unseparated_literal_suffix \
          -W clippy::mem_forget \
          -W clippy::print_stdout \
          -W clippy::print_stderr \
          -W clippy::use_debug \
          -W clippy::todo \
          -W clippy::unimplemented \
          -W clippy::unreachable \
          -W clippy::exit \
          -W clippy::get_unwrap \
          -W clippy::shadow_unrelated \
          -W clippy::shadow_reuse \
          -W clippy::shadow_same \
          -W clippy::multiple_unsafe_ops_per_block \
          -W clippy::undocumented_unsafe_blocks
      working-directory: threatflux-binary-analysis

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        base-ref: ${{ github.event.pull_request.base.sha }}
        head-ref: ${{ github.event.pull_request.head.sha }}
        fail-on-severity: moderate

  cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cargo-deny
      uses: taiki-e/install-action@cargo-deny
    
    - name: Check deny.toml exists
      id: check_deny
      run: |
        if [ -f deny.toml ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      working-directory: threatflux-binary-analysis
    
    - name: Create deny.toml if not exists
      if: steps.check_deny.outputs.exists == 'false'
      run: |
        cat > deny.toml << 'EOF'
        [graph]
        targets = [
            { triple = "x86_64-unknown-linux-gnu" },
            { triple = "x86_64-unknown-linux-musl" },
            { triple = "x86_64-pc-windows-msvc" },
            { triple = "x86_64-apple-darwin" },
            { triple = "aarch64-apple-darwin" },
        ]
        all-features = true
        
        [output]
        feature-depth = 1
        
        [advisories]
        db-path = "~/.cargo/advisory-db"
        db-urls = ["https://github.com/rustsec/advisory-db"]
        vulnerability = "deny"
        unmaintained = "warn"
        yanked = "warn"
        notice = "warn"
        ignore = []
        
        [licenses]
        unlicensed = "deny"
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]
        deny = []
        copyleft = "warn"
        allow-osi-fsf-free = "neither"
        default = "deny"
        confidence-threshold = 0.8
        exceptions = []
        
        [bans]
        multiple-versions = "warn"
        wildcards = "allow"
        highlight = "all"
        workspace-default-features = "allow"
        external-default-features = "allow"
        skip = []
        skip-tree = []
        
        [sources]
        unknown-registry = "warn"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        allow-git = []
        EOF
      working-directory: threatflux-binary-analysis
    
    - name: Run cargo deny
      run: cargo deny check
      working-directory: threatflux-binary-analysis

  semver-checks:
    name: Semantic Versioning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: threatflux-binary-analysis
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcapstone-dev pkg-config
    
    - name: Install cargo-semver-checks
      uses: taiki-e/install-action@cargo-semver-checks
    
    - name: Check semantic versioning
      run: |
        # Check if this is a breaking change
        if cargo semver-checks check-release --baseline-root ${{ github.event.pull_request.base.sha }}; then
          echo "✅ No breaking changes detected"
        else
          echo "⚠️ Potential breaking changes detected"
          echo "Please review the changes and update version accordingly:"
          echo "- Patch version (0.1.x) for bug fixes"
          echo "- Minor version (0.x.0) for new features"
          echo "- Major version (x.0.0) for breaking changes"
          # Don't fail the build, just warn
        fi
      working-directory: threatflux-binary-analysis

  unsafe-code-review:
    name: Unsafe Code Review
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: threatflux-binary-analysis
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcapstone-dev pkg-config
    
    - name: Install cargo-geiger
      uses: taiki-e/install-action@cargo-geiger
    
    - name: Run cargo geiger
      run: |
        echo "🔍 Analyzing unsafe code usage..."
        cargo geiger --format json --output-format json > geiger-report.json || true
        
        if [ -f geiger-report.json ]; then
          echo "📊 Unsafe code statistics:"
          cat geiger-report.json | jq -r '
            .packages[] | 
            select(.unsafeties.used.functions > 0 or .unsafeties.used.exprs > 0 or .unsafeties.used.item_impls > 0 or .unsafeties.used.item_traits > 0 or .unsafeties.used.methods > 0) |
            "Package: \(.package.name) v\(.package.version)
             - Unsafe functions: \(.unsafeties.used.functions)
             - Unsafe expressions: \(.unsafeties.used.exprs)  
             - Unsafe implementations: \(.unsafeties.used.item_impls)
             - Unsafe traits: \(.unsafeties.used.item_traits)
             - Unsafe methods: \(.unsafeties.used.methods)"
          '
        fi
      working-directory: threatflux-binary-analysis
    
    - name: Upload geiger report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unsafe-code-report
        path: threatflux-binary-analysis/geiger-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, security-clippy, cargo-deny, unsafe-code-review]
    if: always()
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-reports
    
    - name: Generate security summary
      run: |
        echo "## 🔒 Security Analysis Summary" > security-summary.md
        echo "" >> security-summary.md
        
        # Check each job result
        if [ "${{ needs.security-audit.result }}" = "success" ]; then
          echo "✅ **Security Audit**: Passed" >> security-summary.md
        else
          echo "❌ **Security Audit**: Failed" >> security-summary.md
        fi
        
        if [ "${{ needs.security-clippy.result }}" = "success" ]; then
          echo "✅ **Security Lints**: Passed" >> security-summary.md
        else
          echo "❌ **Security Lints**: Failed" >> security-summary.md
        fi
        
        if [ "${{ needs.cargo-deny.result }}" = "success" ]; then
          echo "✅ **Dependency Policy**: Passed" >> security-summary.md
        else
          echo "❌ **Dependency Policy**: Failed" >> security-summary.md
        fi
        
        if [ "${{ needs.unsafe-code-review.result }}" = "success" ]; then
          echo "✅ **Unsafe Code Review**: Passed" >> security-summary.md
        else
          echo "❌ **Unsafe Code Review**: Failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "📊 **Detailed Reports**: Check the artifacts for complete analysis results" >> security-summary.md
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md