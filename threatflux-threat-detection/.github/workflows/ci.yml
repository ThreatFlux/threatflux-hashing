name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests to catch regressions
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Install YARA (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Install YARA (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install yara

    - name: Install YARA (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Use vcpkg for YARA on Windows
        vcpkg install yara:x64-windows
      shell: cmd

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build library
      run: cargo build --verbose --all-features

    - name: Build without default features
      run: cargo build --verbose --no-default-features

    - name: Run tests (all features)
      run: cargo test --verbose --all-features

    - name: Run tests (no default features)
      run: cargo test --verbose --no-default-features

    - name: Run tests (feature combinations)
      run: |
        cargo test --verbose --features "yara-engine"
        cargo test --verbose --features "pattern-matching"
        cargo test --verbose --features "async-scanning"
        cargo test --verbose --features "serde-support"

    - name: Run doc tests
      run: cargo test --doc --all-features

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Run benchmarks
      run: |
        # Note: Benchmarks are currently disabled in Cargo.toml
        # This will be enabled when benchmark files are implemented
        echo "Benchmarks will be enabled when benchmark files are implemented"
        # cargo bench --all-features

    - name: Store benchmark results
      if: false  # Disable until benchmarks are implemented
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run clippy security lints
      run: |
        cargo clippy --all-features --all-targets -- \
          -W clippy::suspicious \
          -W clippy::complexity \
          -W clippy::perf \
          -W clippy::style \
          -W clippy::nursery

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust 1.70 (MSRV)
      uses: dtolnay/rust-toolchain@1.70

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Check MSRV
      run: cargo check --all-features

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Create test malware samples (safe)
      run: |
        mkdir -p test-samples
        # Create EICAR test string (standard test file for antivirus)
        echo 'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' > test-samples/eicar.txt
        # Create a simple YARA rule for testing
        cat > test-samples/test.yar << 'EOF'
        rule EICAR_Test {
            meta:
                description = "Standard EICAR test file"
            strings:
                $eicar = "EICAR-STANDARD-ANTIVIRUS-TEST-FILE"
            condition:
                $eicar
        }
        EOF

    - name: Run integration tests with test samples
      run: |
        export THREAT_DETECTION_TEST_SAMPLES="$(pwd)/test-samples"
        cargo test --test integration_test --all-features

    - name: Clean up test samples
      run: rm -rf test-samples