name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
          exit 1
        fi

    - name: Check if Cargo.toml version matches
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CARGO_VERSION="v$(cargo pkgid | cut -d# -f2 | cut -d: -f2)"
        if [ "$VERSION" != "$CARGO_VERSION" ]; then
          echo "Version mismatch: tag=$VERSION, Cargo.toml=$CARGO_VERSION"
          exit 1
        fi

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Run full test suite
      run: |
        cargo test --all-features
        cargo test --no-default-features

    - name: Verify clean working directory
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Working directory is not clean"
          git status
          exit 1
        fi

  build:
    name: Build Release Artifacts
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_suffix: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_suffix: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_suffix: macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: release-${{ matrix.target }}

    - name: Install YARA (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Install YARA (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install yara

    - name: Install YARA (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg install yara:x64-windows
      shell: cmd

    - name: Build release
      run: cargo build --release --all-features --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --release --all-features --target ${{ matrix.target }}

    - name: Package artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        tar -czf artifacts/threatflux-threat-detection-${{ needs.validate.outputs.version }}-${{ matrix.artifact_suffix }}.tar.gz \
          -C target/${{ matrix.target }}/release \
          libthreartflux_threat_detection.* 2>/dev/null || true
        
    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        7z a artifacts/threatflux-threat-detection-${{ needs.validate.outputs.version }}-${{ matrix.artifact_suffix }}.zip `
          ./target/${{ matrix.target }}/release/threatflux_threat_detection.dll.lib `
          ./target/${{ matrix.target }}/release/threatflux_threat_detection.dll 2>$null || echo "Some files may not exist"
      shell: pwsh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: threatflux-threat-detection-${{ matrix.artifact_suffix }}
        path: artifacts/*
        retention-days: 30

  publish-crates:
    name: Publish to crates.io
    needs: [validate, build]
    runs-on: ubuntu-latest
    environment: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish to crates.io
      run: cargo publish --all-features

  create-release:
    name: Create GitHub Release
    needs: [validate, build, publish-crates]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        VERSION="${{ needs.validate.outputs.version }}"
        
        # Create changelog content
        cat > release-notes.md << EOF
        ## What's Changed
        
        This release includes improvements to the ThreatFlux Threat Detection library.
        
        ### Key Features
        - YARA-X integration for advanced threat detection
        - Comprehensive malware analysis capabilities
        - Support for multiple detection engines
        - Async scanning capabilities
        - Built-in rule management
        
        ### Installation
        
        \`\`\`toml
        [dependencies]
        threatflux-threat-detection = "${{ needs.validate.outputs.version }}"
        \`\`\`
        
        ### Documentation
        
        Full documentation is available at [docs.rs](https://docs.rs/threatflux-threat-detection).
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD~1)...${{ needs.validate.outputs.version }}
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: ThreatFlux Threat Detection ${{ needs.validate.outputs.version }}
        body_path: release-notes.md
        files: release-artifacts/**/*
        draft: false
        prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-docs:
    name: Update Documentation
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Generate documentation
      run: |
        cargo doc --all-features --no-deps
        echo '<meta http-equiv="refresh" content="0; url=threatflux_threat_detection">' > target/doc/index.html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.repository == 'ThreatFlux/threatflux-threat-detection'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        publish_branch: gh-pages
        force_orphan: true