name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Check documentation builds
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Check for broken doc links
      run: |
        # Check for broken internal links in documentation
        cargo doc --all-features --no-deps 2>&1 | tee doc-output.log
        if grep -q "warning.*broken.*link" doc-output.log; then
          echo "Found broken documentation links:"
          grep "warning.*broken.*link" doc-output.log
          exit 1
        fi

    - name: Check doc tests
      run: cargo test --doc --all-features

    - name: Validate README examples
      run: |
        # Extract and validate Rust code blocks from README
        if [ -f README.md ]; then
          echo "Checking README.md for valid Rust examples..."
          # This would require a more sophisticated tool in practice
          grep -A 10 '```rust' README.md || echo "No Rust examples found in README"
        fi

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Generate documentation
      run: |
        cargo doc --all-features --no-deps --document-private-items
        echo '<meta http-equiv="refresh" content="0; url=threatflux_threat_detection">' > target/doc/index.html

    - name: Generate additional documentation
      run: |
        # Create an enhanced index page
        cat > target/doc/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ThreatFlux Threat Detection Library Documentation</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    background: #f8f9fa;
                }
                .header {
                    text-align: center;
                    margin-bottom: 40px;
                    padding: 20px;
                    background: white;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .nav {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin: 20px 0;
                }
                .nav-item {
                    background: white;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    text-decoration: none;
                    color: #333;
                    transition: transform 0.2s;
                }
                .nav-item:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                }
                .nav-item h3 {
                    margin: 0 0 10px 0;
                    color: #0969da;
                }
                .badges {
                    margin: 20px 0;
                    text-align: center;
                }
                .badges img {
                    margin: 2px;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üõ°Ô∏è ThreatFlux Threat Detection</h1>
                <p>Comprehensive threat detection library with YARA integration and malware analysis</p>
                <div class="badges">
                    <img src="https://img.shields.io/crates/v/threatflux-threat-detection.svg" alt="Crates.io">
                    <img src="https://img.shields.io/docsrs/threatflux-threat-detection.svg" alt="Docs.rs">
                    <img src="https://img.shields.io/github/actions/workflow/status/ThreatFlux/threatflux-threat-detection/ci.yml?branch=main" alt="CI">
                    <img src="https://img.shields.io/codecov/c/github/ThreatFlux/threatflux-threat-detection" alt="Coverage">
                </div>
            </div>
            
            <div class="nav">
                <a href="threatflux_threat_detection/index.html" class="nav-item">
                    <h3>üìö API Documentation</h3>
                    <p>Complete API reference with examples</p>
                </a>
                
                <a href="https://github.com/ThreatFlux/threatflux-threat-detection" class="nav-item">
                    <h3>üìñ GitHub Repository</h3>
                    <p>Source code, issues, and contributions</p>
                </a>
                
                <a href="https://crates.io/crates/threatflux-threat-detection" class="nav-item">
                    <h3>üì¶ Crates.io</h3>
                    <p>Download and dependency information</p>
                </a>
            </div>
            
            <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-top: 20px;">
                <h2>Quick Start</h2>
                <p>Add this to your <code>Cargo.toml</code>:</p>
                <pre style="background: #f6f8fa; padding: 10px; border-radius: 4px;">
        [dependencies]
        threatflux-threat-detection = "0.1.0"</pre>
                
                <p>Basic usage:</p>
                <pre style="background: #f6f8fa; padding: 10px; border-radius: 4px;">
        use threatflux_threat_detection::ThreatDetector;
        
        let detector = ThreatDetector::new()?;
        let result = detector.scan_file("suspicious_file.exe")?;</pre>
            </div>
            
            <script>
                // Auto-redirect to main documentation after 3 seconds if not interacted with
                let redirectTimer = setTimeout(() => {
                    window.location.href = 'threatflux_threat_detection/index.html';
                }, 3000);
                
                // Cancel redirect if user interacts with page
                document.addEventListener('click', () => clearTimeout(redirectTimer));
                document.addEventListener('keypress', () => clearTimeout(redirectTimer));
            </script>
        </body>
        </html>
        EOF

    - name: Add custom CSS for documentation
      run: |
        # Create custom CSS for better documentation styling
        mkdir -p target/doc/static.files
        cat > target/doc/static.files/custom.css << 'EOF'
        /* Custom styles for ThreatFlux documentation */
        .sidebar {
            background: linear-gradient(145deg, #667eea 0%, #764ba2 100%);
        }
        
        .sidebar .location {
            color: white;
        }
        
        .sidebar a {
            color: rgba(255, 255, 255, 0.9);
        }
        
        .sidebar a:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
        }
        
        h1.fqn {
            color: #667eea;
        }
        
        .security-warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 4px;
            padding: 10px;
            margin: 10px 0;
        }
        
        .example-wrap {
            background: #f8f9fa;
            border-radius: 6px;
        }
        EOF

    - name: Generate sitemap
      run: |
        # Generate a sitemap for the documentation
        find target/doc -name "*.html" | sed 's|target/doc/|https://threatflux.github.io/threatflux-threat-detection/|' > target/doc/sitemap.txt

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/
        retention-days: 30

  deploy-docs:
    name: Deploy Documentation
    needs: [docs-check, build-docs]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository == 'ThreatFlux/threatflux-threat-detection'
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  spell-check:
    name: Spell Check Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Install cspell
      run: npm install -g cspell

    - name: Create cspell config
      run: |
        cat > .cspell.json << 'EOF'
        {
          "version": "0.2",
          "language": "en",
          "words": [
            "threatflux",
            "YARA",
            "malware",
            "antivirus",
            "crypto",
            "async",
            "struct",
            "enum",
            "impl",
            "Vec",
            "HashMap",
            "Result",
            "Option",
            "tokio",
            "serde",
            "anyhow",
            "thiserror",
            "clippy",
            "rustfmt",
            "deps",
            "crates",
            "stdlib"
          ],
          "flagWords": [],
          "ignorePaths": [
            "target/**",
            "*.lock",
            ".git/**"
          ]
        }
        EOF

    - name: Run spell check on source
      run: |
        cspell "src/**/*.rs" || true
        
    - name: Run spell check on README
      run: |
        cspell README.md || true

    - name: Generate documentation and spell check
      run: |
        cargo doc --all-features --no-deps
        # Spell check generated documentation
        find target/doc -name "*.html" -exec cspell {} \; | head -50 || true

  link-check:
    name: Check External Links
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Generate documentation
      run: cargo doc --all-features --no-deps

    - name: Install markdown-link-check
      run: npm install -g markdown-link-check

    - name: Check README links
      run: |
        if [ -f README.md ]; then
          markdown-link-check README.md --config .github/mlc_config.json || true
        fi

    - name: Create link check config
      run: |
        mkdir -p .github
        cat > .github/mlc_config.json << 'EOF'
        {
          "ignorePatterns": [
            {
              "pattern": "^http://localhost"
            },
            {
              "pattern": "^https://localhost" 
            }
          ],
          "timeout": "20s",
          "retryOn429": true,
          "retryCount": 3,
          "fallbackRetryDelay": "30s",
          "aliveStatusCodes": [200, 206]
        }
        EOF

  doc-coverage:
    name: Documentation Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustdoc

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install YARA
      run: |
        sudo apt-get update
        sudo apt-get install -y libyara-dev yara

    - name: Check documentation coverage
      run: |
        RUSTDOCFLAGS="-Z unstable-options --show-coverage" \
        cargo +nightly doc --all-features --no-deps 2>&1 | tee doc-coverage.txt
        
        # Extract coverage percentage
        if grep -q "coverage:" doc-coverage.txt; then
          echo "Documentation coverage report generated successfully"
        fi

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: doc-coverage
        path: doc-coverage.txt
        retention-days: 30